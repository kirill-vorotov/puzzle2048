// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.ColorBallsPuzzle.Gameplay
{
    using global::System.Buffers;
    using global::MessagePack;

    public sealed class CampaignLevelDescModelFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ColorBallsPuzzle.Gameplay.CampaignLevelDescModel>
    {
        // id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 105, 100 };
        // init_fwd_spd
        private static global::System.ReadOnlySpan<byte> GetSpan_BallInitialForwardSpeed() => new byte[1 + 12] { 172, 105, 110, 105, 116, 95, 102, 119, 100, 95, 115, 112, 100 };
        // max_fwd_spd
        private static global::System.ReadOnlySpan<byte> GetSpan_BallMaxForwardSpeed() => new byte[1 + 11] { 171, 109, 97, 120, 95, 102, 119, 100, 95, 115, 112, 100 };
        // fwd_acceleration
        private static global::System.ReadOnlySpan<byte> GetSpan_BallForwardAcceleration() => new byte[1 + 16] { 176, 102, 119, 100, 95, 97, 99, 99, 101, 108, 101, 114, 97, 116, 105, 111, 110 };
        // init_back_spd
        private static global::System.ReadOnlySpan<byte> GetSpan_BallInitialBackwardSpeed() => new byte[1 + 13] { 173, 105, 110, 105, 116, 95, 98, 97, 99, 107, 95, 115, 112, 100 };
        // init_health
        private static global::System.ReadOnlySpan<byte> GetSpan_InitialHealth() => new byte[1 + 11] { 171, 105, 110, 105, 116, 95, 104, 101, 97, 108, 116, 104 };
        // dmg_per_ball
        private static global::System.ReadOnlySpan<byte> GetSpan_DamagePerBall() => new byte[1 + 12] { 172, 100, 109, 103, 95, 112, 101, 114, 95, 98, 97, 108, 108 };
        // limit_balls_spawn
        private static global::System.ReadOnlySpan<byte> GetSpan_LimitBallsSpawn() => new byte[1 + 17] { 177, 108, 105, 109, 105, 116, 95, 98, 97, 108, 108, 115, 95, 115, 112, 97, 119, 110 };
        // balls_amount
        private static global::System.ReadOnlySpan<byte> GetSpan_BallsAmount() => new byte[1 + 12] { 172, 98, 97, 108, 108, 115, 95, 97, 109, 111, 117, 110, 116 };
        // goal
        private static global::System.ReadOnlySpan<byte> GetSpan_Goal() => new byte[1 + 4] { 164, 103, 111, 97, 108 };
        // balls
        private static global::System.ReadOnlySpan<byte> GetSpan_Balls() => new byte[1 + 5] { 165, 98, 97, 108, 108, 115 };
        // projectiles
        private static global::System.ReadOnlySpan<byte> GetSpan_Projectiles() => new byte[1 + 11] { 171, 112, 114, 111, 106, 101, 99, 116, 105, 108, 101, 115 };
        // max_projectile_level
        private static global::System.ReadOnlySpan<byte> GetSpan_MaxProjectileLevel() => new byte[1 + 20] { 180, 109, 97, 120, 95, 112, 114, 111, 106, 101, 99, 116, 105, 108, 101, 95, 108, 101, 118, 101, 108 };
        // visual
        private static global::System.ReadOnlySpan<byte> GetSpan_Visual() => new byte[1 + 6] { 166, 118, 105, 115, 117, 97, 108 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::ColorBallsPuzzle.Gameplay.CampaignLevelDescModel value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(14);
            writer.WriteRaw(GetSpan_Id());
            formatterResolver.GetFormatterWithVerify<global::ColorBallsPuzzle.Gameplay.CampaignLevelDescId>().Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_BallInitialForwardSpeed());
            writer.Write(value.BallInitialForwardSpeed);
            writer.WriteRaw(GetSpan_BallMaxForwardSpeed());
            writer.Write(value.BallMaxForwardSpeed);
            writer.WriteRaw(GetSpan_BallForwardAcceleration());
            writer.Write(value.BallForwardAcceleration);
            writer.WriteRaw(GetSpan_BallInitialBackwardSpeed());
            writer.Write(value.BallInitialBackwardSpeed);
            writer.WriteRaw(GetSpan_InitialHealth());
            formatterResolver.GetFormatterWithVerify<global::ColorBallsPuzzle.Gameplay.Health>().Serialize(ref writer, value.InitialHealth, options);
            writer.WriteRaw(GetSpan_DamagePerBall());
            formatterResolver.GetFormatterWithVerify<global::ColorBallsPuzzle.Gameplay.Health>().Serialize(ref writer, value.DamagePerBall, options);
            writer.WriteRaw(GetSpan_LimitBallsSpawn());
            writer.Write(value.LimitBallsSpawn);
            writer.WriteRaw(GetSpan_BallsAmount());
            writer.Write(value.BallsAmount);
            writer.WriteRaw(GetSpan_Goal());
            formatterResolver.GetFormatterWithVerify<global::ColorBallsPuzzle.Gameplay.BallLevel>().Serialize(ref writer, value.Goal, options);
            writer.WriteRaw(GetSpan_Balls());
            formatterResolver.GetFormatterWithVerify<global::ColorBallsPuzzle.Gameplay.BallLevel[]>().Serialize(ref writer, value.Balls, options);
            writer.WriteRaw(GetSpan_Projectiles());
            formatterResolver.GetFormatterWithVerify<global::ColorBallsPuzzle.Gameplay.BallLevel[]>().Serialize(ref writer, value.Projectiles, options);
            writer.WriteRaw(GetSpan_MaxProjectileLevel());
            formatterResolver.GetFormatterWithVerify<global::ColorBallsPuzzle.Gameplay.BallLevel>().Serialize(ref writer, value.MaxProjectileLevel, options);
            writer.WriteRaw(GetSpan_Visual());
            formatterResolver.GetFormatterWithVerify<global::ColorBallsPuzzle.Gameplay.CampaignLevelVisualDescModel>().Serialize(ref writer, value.Visual, options);
        }

        public global::ColorBallsPuzzle.Gameplay.CampaignLevelDescModel Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::ColorBallsPuzzle.Gameplay.CampaignLevelDescModel();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25705UL) { goto FAIL; }

                        ____result.Id = formatterResolver.GetFormatterWithVerify<global::ColorBallsPuzzle.Gameplay.CampaignLevelDescId>().Deserialize(ref reader, options);
                        continue;
                    case 12:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7239367486182354537UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1685091167UL) { goto FAIL; }

                                ____result.BallInitialForwardSpeed = reader.ReadSingle();
                                continue;

                            case 6877671114259524964UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1819042146UL) { goto FAIL; }

                                ____result.DamagePerBall = formatterResolver.GetFormatterWithVerify<global::ColorBallsPuzzle.Gameplay.Health>().Deserialize(ref reader, options);
                                continue;

                            case 7881685772219998562UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1953396079UL) { goto FAIL; }

                                ____result.BallsAmount = reader.ReadInt32();
                                continue;

                        }
                    case 11:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 6873750212846313837UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 6582387UL) { goto FAIL; }

                                ____result.BallMaxForwardSpeed = reader.ReadSingle();
                                continue;

                            case 7018130353511034473UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 6845548UL) { goto FAIL; }

                                ____result.InitialHealth = formatterResolver.GetFormatterWithVerify<global::ColorBallsPuzzle.Gameplay.Health>().Deserialize(ref reader, options);
                                continue;

                            case 7598807758509404784UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7562604UL) { goto FAIL; }

                                ____result.Projectiles = formatterResolver.GetFormatterWithVerify<global::ColorBallsPuzzle.Gameplay.BallLevel[]>().Deserialize(ref reader, options);
                                continue;

                        }
                    case 16:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_BallForwardAcceleration().Slice(1))) { goto FAIL; }

                        ____result.BallForwardAcceleration = reader.ReadSingle();
                        continue;
                    case 13:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_BallInitialBackwardSpeed().Slice(1))) { goto FAIL; }

                        ____result.BallInitialBackwardSpeed = reader.ReadSingle();
                        continue;
                    case 17:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_LimitBallsSpawn().Slice(1))) { goto FAIL; }

                        ____result.LimitBallsSpawn = reader.ReadBoolean();
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1818324839UL) { goto FAIL; }

                        ____result.Goal = formatterResolver.GetFormatterWithVerify<global::ColorBallsPuzzle.Gameplay.BallLevel>().Deserialize(ref reader, options);
                        continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 495740281186UL) { goto FAIL; }

                        ____result.Balls = formatterResolver.GetFormatterWithVerify<global::ColorBallsPuzzle.Gameplay.BallLevel[]>().Deserialize(ref reader, options);
                        continue;
                    case 20:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_MaxProjectileLevel().Slice(1))) { goto FAIL; }

                        ____result.MaxProjectileLevel = formatterResolver.GetFormatterWithVerify<global::ColorBallsPuzzle.Gameplay.BallLevel>().Deserialize(ref reader, options);
                        continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 119165838125430UL) { goto FAIL; }

                        ____result.Visual = formatterResolver.GetFormatterWithVerify<global::ColorBallsPuzzle.Gameplay.CampaignLevelVisualDescModel>().Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }
}
